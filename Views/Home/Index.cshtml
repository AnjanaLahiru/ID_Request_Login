@model ID_Request_Login.Models.User
@using System.Web.Mvc
@using System.Web.Mvc.Html
@using System.Web.Mvc.Ajax
@{
    ViewBag.Title = "ID Request System";
    Layout = null;
    if (Session["UserID"] == null)
    {
        Response.Redirect("~/Login/Index");
    }

    var requests = ViewBag.Requests as List<ID_Request_Login.Models.Request_Data>;
    var currentPage = ViewBag.CurrentPage;
    var totalPages = ViewBag.TotalPages;
    var hasNextPage = ViewBag.HasNextPage;
    var hasPreviousPage = ViewBag.HasPreviousPage;
    var totalItems = ViewBag.TotalItems;
}

@functions {
    public string GetSectionDisplayName()
    {
        // Return the section name from session
        return Session["SectionName"]?.ToString() ?? "Unknown Section";
    }
}

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>ID Request System</title>

    <!-- Bootstrap CSS -->
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/css/bootstrap.min.css" rel="stylesheet">
    <!-- Font Awesome -->
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css" rel="stylesheet">
    <!--CSS from Content/StyleSheet.css-->
    <link href="~/Content/StyleSheet.css" rel="stylesheet" type="text/css" />

</head>

<body>
    <div class="main-container">
        <div class="container">
            <div class="row">
                <div class="col-lg-12">
                    <div class="header-panel">
                        <div class="header-content">
                            <div class="user-info">
                                <div class="icon-box">
                                    <i class="fas fa-id-card fa-lg"></i>
                                </div>
                                <div>
                                    <h4 class="mb-1">Employee ID Request System (Section Dashboard)</h4>
                                    <div class="d-flex align-items-center">
                                        <i class="fas fa-user-circle me-2"></i>
                                        <h5 class="mb-0">Welcome, @Session["UserName"].ToString() (@Session["SectionName"].ToString())</h5>
                                    </div>
                                </div>
                            </div>
                            <div>
                                <button type="button" class="logout-btn w-100" onclick="window.location.href='@Url.Action("LogOut", "Login")'">
                                    <i class="fas fa-sign-out-alt me-2"></i>Log Out
                                </button>

                            </div>
                        </div>
                    </div>
                </div>
            </div>
            <div class="row">
                <div class="col-lg-4">
                    <div class="card mb-4">
                        <div class="card-header">
                            <h5 class="text-center mb-0">
                                <i class="fas fa-clipboard-list me-2"></i>New ID Request
                            </h5>
                        </div>
                        <div class="card-body">
                            @using (Html.BeginForm("Index", "Home", FormMethod.Post, new { @class = "needs-validation", role = "form", id = "requestForm", enctype = "multipart/form-data" }))
                            {
                                @Html.AntiForgeryToken()

                                <div class="row">
                                    <div class="col-md-12 mb-3">
                                        <label for="EmployeeId">
                                            <i class="fas fa-id-badge form-icon"></i>EMP NO
                                        </label>
                                        <input type="text" id="EmployeeId" name="EmployeeId" class="form-control"
                                               placeholder="Enter Employee Number" required />
                                    </div>
                                </div>

                                <div class="mb-3">
                                    <label for="EmployeeName">
                                        <i class="fas fa-user-tag form-icon"></i>EMP NAME
                                    </label>
                                    <input type="text" id="EmployeeName" name="EmployeeName" class="form-control"
                                           placeholder="Enter Employee Name" required />
                                </div>

                                <div class="mb-4">
                                    <label for="Reason">
                                        <i class="fas fa-comment-alt form-icon"></i>REASON
                                    </label>
                                    <select id="Reason" name="Reason" class="form-select" required>
                                        <option value="" selected disabled>-- Select Reason --</option>
                                        <option value="New Employee">New Employee</option>
                                        <option value="Lost Card">Lost Card</option>
                                        <option value="Damaged Card">Damaged Card</option>
                                        <option value="Data Correction">Data Correction</option>
                                        <option value="Department Transfer">Department Transfer</option>
                                        <option value="Department Promotion">Department Promotion</option>
                                    </select>
                                </div>

                                <input type="hidden" id="RequestDate" name="RequestDate" />
                                <input type="hidden" id="RequestBy" name="RequestBy" value="@Session["UserName"].ToString()" />
                                <input type="hidden" id="Status" name="Status" value="Pending" />

                                <div class="info-box mb-4">
                                    <div class="d-flex align-items-start">
                                        <i class="fas fa-info-circle me-3 mt-1 text-primary"></i>
                                        <p class="mb-0 small">Please ensure all information is accurate. ID requests subject to approval from HR Department.</p>
                                    </div>
                                </div>

                                <div class="text-center pt-2">
                                    <button type="submit" class="btn btn-primary me-2" id="submitButton">
                                        <i class="fas fa-paper-plane me-2"></i>Request
                                    </button>
                                    <button type="button" class="btn btn-secondary" id="clearButton">
                                        <i class="fas fa-times me-2"></i>Clear
                                    </button>
                                </div>
                            }
                            @if (ViewData["Message"] != null)
                            {
                                <div class="alert alert-success mt-3">
                                    @ViewData["Message"]
                                </div>
                            }

                        </div>
                    </div>

                    <div class="text-center text-muted small">
                        <p>ID Request System &copy; @DateTime.Now.Year - Contact IT Support for assistance</p>
                    </div>
                </div>

                <div class="col-lg-8">
                    <div class="shadow rounded p-3 bg-white">
                        <h4><i class="fas fa-list-alt me-2"></i>Requests</h4>

                        <div class="row mb-3">
                            <div class="col-md-6">
                                <div class="card">
                                    <div class="card-header py-1">
                                        <strong>Date Period</strong>
                                    </div>
                                    <div class="card-body py-2">
                                        <div class="row">
                                            <div class="col-md-6">
                                                <label class="form-label">From Date</label>
                                                <input type="date" id="fromDate" class="form-control form-control-sm" />
                                            </div>
                                            <div class="col-md-6">
                                                <label class="form-label">To Date</label>
                                                <input type="date" id="toDate" class="form-control form-control-sm" />
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                            <div class="col-md-6">
                                <div class="card">
                                    <div class="card-header py-1">
                                        <strong>Status</strong>
                                    </div>
                                    <div class="card-body py-2">
                                        <select id="statusSelect" class="form-select form-select-sm">
                                            <option value="All">All Statuses</option>
                                            <option value="Pending">Pending</option>
                                            <option value="In-Progress">In-Progress</option>
                                            <option value="Completed">Completed</option>
                                            <option value="Issued">Issued</option>
                                            <option value="Deleted">Deleted</option>
                                        </select>
                                    </div>
                                </div>
                            </div>
                        </div>
                        <div class="text-center pt-2">
                            <button type="button" class="btn btn-primary me-2" id="filterButton">
                                <i class="fas fa-filter me-2"></i>Filter
                            </button>
                            <button type="button" class="btn btn-secondary" id="resetFilterButton">
                                <i class="fas fa-eraser me-2"></i>Clear
                            </button>
                        </div>

                        <div class="table-responsive mt-4">
                            <table class="table table-bordered" id="requestsTable">
                                <thead>
                                    <tr>
                                        <th scope="col" width="5%" class="checkbox-cell">Select</th>
                                        <th scope="col">Request Date</th>
                                        <th scope="col">Request By</th>
                                        <th scope="col">Employee Name</th>
                                        <th scope="col">Employee ID</th>
                                        <th scope="col">Reason</th>
                                        <th scope="col">Status</th>
                                        <th scope="col">Section</th>
                                    </tr>
                                </thead>
                                <tbody id="requestsTableBody">
                                    @if (requests != null && requests.Count > 0)
                                    {
                                        foreach (var request in requests)
                                        {
                                            bool canDelete = request.Status != "Completed" && request.Status != "Issued" && request.Status != "Deleted";
                                            string statusClass = "";

                                            if (request.Status == "Completed" || request.Status == "Issued" || request.Status == "Deleted")
                                            {
                                                statusClass = "status-completed";
                                            }
                                            else if (request.Status == "In-Progress")
                                            {
                                                statusClass = "status-in-progress";
                                            }
                                            else if (request.Status == "Pending")
                                            {
                                                statusClass = "status-pending";
                                            }

                                            <tr class="@(request.Status == "Deleted" ? "deleted-row" : "")">
                                                <td class="checkbox-cell">
                                                    @if (canDelete)
                                                    {
                                                        <div class="select-checkbox">
                                                            <input type="checkbox" class="form-check-input request-checkbox" data-id="@request.ReqId">
                                                        </div>
                                                    }
                                                    else
                                                    {
                                                        <div class="select-checkbox">
                                                            <i class="fas fa-lock text-muted" title="Cannot delete Completed, Issued or Deleted requests"></i>
                                                        </div>
                                                    }
                                                </td>
                                                <td>@request.RequestDate.ToString("dd/MM/yyyy")</td>
                                                <td>@request.RequestBy</td>
                                                <td>@request.EmployeeName</td>
                                                <td>@request.EmployeeId</td>
                                                <td>@request.Reason</td>
                                                <td class="@statusClass">@request.Status</td>
                                                <td>@GetSectionDisplayName()</td>
                                            </tr>
                                        }
                                    }
                                    else
                                    {
                                        <tr>
                                            <td colspan="8" class="text-center">No requests found.</td>
                                        </tr>
                                    }
                                </tbody>
                            </table>
                        </div>

                        <div class="pagination-container">
                            <div class="pagination-info">
                                @if (totalItems > 0)
                                {
                                    <span>
                                        Showing <span id="itemsFrom">@((currentPage - 1) * 10 + 1)</span> to
                                        <span id="itemsTo">@Math.Min(currentPage * 10, totalItems)</span> of
                                        <span id="totalItems">@totalItems</span> entries
                                    </span>
                                }
                                else
                                {
                                    <span>No entries to show</span>
                                }
                            </div>
                            @if (totalPages > 1)
                            {
                                <nav aria-label="Page navigation">
                                    <ul class="pagination" id="paginationControls">
                                        <li class="page-item @(hasPreviousPage ? "" : "disabled")" id="prevPage">
                                            <a class="page-link" href="@Url.Action("Index", new { page = currentPage - 1 })" aria-label="Previous">
                                                <span aria-hidden="true">&laquo;</span>
                                            </a>
                                        </li>

                                        @for (int i = Math.Max(1, currentPage - 2); i <= Math.Min(totalPages, currentPage + 2); i++)
                                        {
                                            <li class="page-item @(i == currentPage ? "active" : "")">
                                                <a class="page-link" href="@Url.Action("Index", new { page = i })">@i</a>
                                            </li>
                                        }

                                        <li class="page-item @(hasNextPage ? "" : "disabled")" id="nextPage">
                                            <a class="page-link" href="@Url.Action("Index", new { page = currentPage + 1 })" aria-label="Next">
                                                <span aria-hidden="true">&raquo;</span>
                                            </a>
                                        </li>
                                    </ul>
                                </nav>
                            }
                        </div>

                        <div class="text-center pt-2 mt-3">
                            <button type="button" class="btn btn-danger" id="deleteSelectedButton">
                                <i class="fas fa-trash-alt me-2"></i>Delete Selected
                            </button>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/js/bootstrap.bundle.min.js"></script>
        <script src="https://code.jquery.com/jquery-3.7.1.min.js"></script>
        <script>
            document.addEventListener('DOMContentLoaded', function () {
                const clearButton = document.getElementById('clearButton');
                const resetFilterButton = document.getElementById('resetFilterButton');
                const requestForm = document.getElementById('requestForm');
                const requestsTableBody = document.getElementById('requestsTableBody');
                const deleteSelectedButton = document.getElementById('deleteSelectedButton');
                const paginationControls = document.getElementById('paginationControls');

                $.ajaxSetup({
                    beforeSend: function (xhr) {
                        xhr.setRequestHeader("__RequestVerificationToken",
                            $('input[name="__RequestVerificationToken"]').val());
                    }
                });

                let currentPage = @currentPage;
                let currentFilters = {
                    fromDate: '',
                    toDate: '',
                    status: 'All'
                };

                const currentDate = new Date();
                const formattedDate = `${currentDate.getFullYear()}-${String(currentDate.getMonth() + 1).padStart(2, '0')}-${String(currentDate.getDate()).padStart(2, '0')}`;
                document.getElementById('RequestDate').value = formattedDate;

                if (clearButton) {
                    clearButton.addEventListener('click', function () {
                        document.getElementById('EmployeeId').value = '';
                        document.getElementById('EmployeeName').value = '';
                        document.getElementById('Reason').selectedIndex = 0;
                        document.getElementById('EmployeeId').focus();
                    });
                }

                if (resetFilterButton) {
                    resetFilterButton.addEventListener('click', function () {
                        document.getElementById('fromDate').value = '';
                        document.getElementById('toDate').value = '';
                        document.getElementById('statusSelect').selectedIndex = 0;

                        currentPage = 1;
                        currentFilters = {
                            fromDate: '',
                            toDate: '',
                            status: 'All'
                        };

                        window.location.href = '@Url.Action("Index", "Home", new { page = 1 })';
                    });
                }

                const filterButton = document.getElementById('filterButton');

                if (filterButton) {
                    filterButton.addEventListener('click', function () {
                        const fromDate = document.getElementById('fromDate').value;
                        const toDate = document.getElementById('toDate').value;
                        const status = document.getElementById('statusSelect').value;

                        currentPage = 1;
                        currentFilters = {
                            fromDate: fromDate,
                            toDate: toDate,
                            status: status
                        };

                        $.ajax({
                            url: '@Url.Action("FilterRequests", "Home")',
                            type: 'POST',
                            data: {
                                fromDate: fromDate,
                                toDate: toDate,
                                status: status,
                                page: currentPage

                            },
                            success: function (response) {
                                if (response && response.data) {
                                    updateRequestsTable(response.data);
                                    updatePagination(response);
                                } else {
                                    console.error('Invalid response structure:', response);
                                    alert('Received an invalid response from the server.');
                                }
                            },
                            error: function (error) {
                                console.error('Error filtering requests:', error);
                                alert('An error occurred while filtering requests. Please try again.');
                            }
                        });
                    });
                }

                if (paginationControls) {
                    paginationControls.addEventListener('click', function(e) {
                        if (e.target.tagName === 'A' || e.target.parentElement.tagName === 'A') {
                            e.preventDefault();

                            let targetPage = currentPage;

                            if (e.target.textContent === '»' || e.target.parentElement.textContent === '»') {
                                targetPage = currentPage + 1;
                            } else if (e.target.textContent === '«' || e.target.parentElement.textContent === '«') {
                                targetPage = currentPage - 1;
                            } else {
                                targetPage = parseInt(e.target.textContent);
                            }

                            if (isNaN(targetPage) || targetPage === currentPage) {
                                return;
                            }

                            currentPage = targetPage;

                            if (currentFilters.fromDate || currentFilters.toDate ||
                                currentFilters.status !== 'All') {
                                $.ajax({
                                    url: '@Url.Action("FilterRequests", "Home")',
                                    type: 'POST',
                                    data: {
                                        fromDate: currentFilters.fromDate,
                                        toDate: currentFilters.toDate,
                                        status: currentFilters.status,
                                        page: currentPage
                                    },
                                    success: function (response) {
                                        updateRequestsTable(response.data);
                                        updatePagination(response);
                                    },
                                    error: function (error) {
                                        console.error('Error loading page:', error);
                                        alert('An error occurred while loading the page.');
                                    }
                                });
                            } else {
                                window.location.href = '@Url.Action("Index", "Home")?page=' + currentPage;
                            }
                        }
                    });
                }

                if (deleteSelectedButton) {
                    deleteSelectedButton.addEventListener('click', function () {
                        const selectedCheckboxes = document.querySelectorAll('.request-checkbox:checked');

                        if (selectedCheckboxes.length === 0) {
                            alert('Please select at least one request to delete.');
                            return;
                        }

                        const confirmDelete = confirm(`Are you sure you want to mark ${selectedCheckboxes.length} selected request(s) as deleted?`);

                        if (confirmDelete) {
                            const selectedIds = Array.from(selectedCheckboxes).map(checkbox =>
                                parseInt(checkbox.getAttribute('data-id'))
                            );

                            $.ajax({
                                url: '@Url.Action("DeleteRequests", "Home")',
                                type: 'POST',
                                data: { ids: selectedIds },
                                traditional: true,
                                success: function (response) {
                                    if (response.success) {
                                        let message = `${response.count} request(s) marked as deleted.`;
                                        if (response.skippedCount > 0) {
                                            message += ` ${response.skippedCount} request(s) with status 'Completed' or 'Issued' could not be deleted.`;
                                        }
                                        alert(message);

                                        if (currentFilters.fromDate || currentFilters.toDate ||
                                            currentFilters.status !== 'All') {
                                            $.ajax({
                                                url: '@Url.Action("FilterRequests", "Home")',
                                                type: 'POST',
                                                data: {
                                                    fromDate: currentFilters.fromDate,
                                                    toDate: currentFilters.toDate,
                                                    status: currentFilters.status,
                                                    page: currentPage
                                                },
                                                success: function (response) {
                                                    updateRequestsTable(response.data);
                                                    updatePagination(response);
                                                },
                                                error: function (error) {
                                                    console.error('Error reloading data:', error);
                                                    window.location.reload(); 
                                                }
                                            });
                                        } else {
                                            window.location.href = '@Url.Action("Index", "Home")?page=' + currentPage;
                                        }
                                    } else {
                                        alert('Failed to delete requests: ' + (response.message || 'Unknown error'));
                                    }
                                },
                                error: function (error) {
                                    console.error('Error deleting requests:', error);
                                    alert('An error occurred while trying to delete requests. Please try again.');
                                }
                            });
                        }
                    });
                }

                function updatePagination(response) {
                    const { currentPage, totalPages, totalItems } = response;

                    const itemsFrom = document.getElementById('itemsFrom');
                    const itemsTo = document.getElementById('itemsTo');
                    const totalItemsElement = document.getElementById('totalItems');

                    if (itemsFrom) itemsFrom.textContent = totalItems > 0 ? (currentPage - 1) * 10 + 1 : 0;
                    if (itemsTo) itemsTo.textContent = Math.min(currentPage * 10, totalItems);
                    if (totalItemsElement) totalItemsElement.textContent = totalItems;

                    if (paginationControls) {
                        let paginationHTML = '';

                        paginationHTML += `
                            <li class="page-item ${currentPage > 1 ? '' : 'disabled'}" id="prevPage">
                                <a class="page-link" href="#" aria-label="Previous">
                                    <span aria-hidden="true">&laquo;</span>
                                </a>
                            </li>
                        `;

                        for (let i = Math.max(1, currentPage - 2); i <= Math.min(totalPages, currentPage + 2); i++) {
                            paginationHTML += `
                                <li class="page-item ${i === currentPage ? 'active' : ''}">
                                    <a class="page-link" href="#">${i}</a>
                                </li>
                            `;
                        }

                        paginationHTML += `
                            <li class="page-item ${currentPage < totalPages ? '' : 'disabled'}" id="nextPage">
                                <a class="page-link" href="#" aria-label="Next">
                                    <span aria-hidden="true">&raquo;</span>
                                </a>
                            </li>
                        `;

                        paginationControls.innerHTML = paginationHTML;
                    }

                    const paginationContainer = document.querySelector('.pagination-container');
                    if (paginationContainer) {
                        if (totalPages <= 1) {
                            paginationControls.style.display = 'none';
                        } else {
                            paginationControls.style.display = 'flex';
                        }
                    }
                }

                function updateRequestsTable(requests) {
                    if (!requestsTableBody) {
                        console.error('Table body element not found');
                        return;
                    }

                    requestsTableBody.innerHTML = '';

                    if (requests && requests.length > 0) {
                        requests.forEach(function(request) {
                            const rowClass = request.Status === 'Deleted' ? 'deleted-row' : '';
                            let statusClass = '';

                            if (request.Status === 'Completed' || request.Status === 'Issued') {
                                statusClass = 'status-completed';
                            } else if (request.Status === 'In-Progress') {
                                statusClass = 'status-in-progress';
                            } else if (request.Status === 'Pending') {
                                statusClass = 'status-pending';
                            }

                            const canDelete = request.Status !== 'Completed' && request.Status !== 'Issued' && request.Status !== 'Deleted';

                            let checkboxHtml = '';
                            if (canDelete) {
                                checkboxHtml = `
                                    <div class="select-checkbox">
                                        <input type="checkbox" class="form-check-input request-checkbox" data-id="${request.ReqId}">
                                    </div>`;
                            } else {
                                checkboxHtml = `
                                    <div class="select-checkbox">
                                        <i class="fas fa-lock text-muted" title="Cannot delete Completed, Issued or Deleted requests"></i>
                                    </div>`;
                            }

                            const newRow = document.createElement('tr');
                            newRow.className = rowClass;
                            newRow.innerHTML = `
                                <td class="checkbox-cell">${checkboxHtml}</td>
                                <td>${request.RequestDate}</td>
                                <td>${request.RequestBy}</td>
                                <td>${request.EmployeeName}</td>
                                <td>${request.EmployeeId}</td>
                                <td>${request.Reason}</td>
                                <td class="${statusClass}">${request.Status}</td>
                                <td>${request.SectionName || ''}</td>
                            `;

                            requestsTableBody.appendChild(newRow);
                        });
                    } else {
                        const emptyRow = document.createElement('tr');
                        emptyRow.innerHTML = '<td colspan="8" class="text-center">No requests found.</td>';
                        requestsTableBody.appendChild(emptyRow);
                    }
                }
            });

            function redirectToLogout() {
                window.location.replace('@Url.Action("LogOut", "Login")');
            }
        </script>
    </div>
</body>
</html>
